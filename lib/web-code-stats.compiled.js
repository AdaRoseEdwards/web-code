'use strict';


	/* eslint-disable */
	var isServer = true;
	

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var mime = _interopDefault(require('mime'));
var PouchDB = _interopDefault(require('pouchdb-browser'));

/* global Promise, isServer */
/* eslint no-var: 0, no-console: 0 */
/* eslint-env es6 */

var db = isServer ? null : new PouchDB('web-code', {});
function updateDBDoc(_id, obj) {

	updateDBDoc.promise = updateDBDoc.promise || Promise.resolve();

	/* update last open folder in db */
	return updateDBDoc.promise = updateDBDoc.promise
		.then(function () {
			return db.get(_id)
		})
		.catch(function (e) {
			if (e.status === 404) {
				return { _id: _id }
			}
			throw e;
		})
		.then(function (doc) {
			Object.keys(obj).forEach(function (key) {
				doc[key] = obj[key];
			});
			db.put(doc);
		});
}

/* Like web-code-stats but for storing the file inside and not as a seperate file */
/* eslint no-var: 0, no-console: 0 */
/* eslint-env es6 */

var idToBufferFileMap = new Map();

var compulsaryAttrs = [
	'name',
	'id',
	'icon'
];

var optionalAttrs = [
	'mime'
];

var keys$1 = compulsaryAttrs.concat(optionalAttrs);

function BufferFile(data) {

	this.data = {};

	compulsaryAttrs.forEach(function (key) {
		if (data[key]) {
			this.data[key] = data[key];
		} else {
			throw Error('Missing Key: ' + key);
		}
	}.bind(this));

	if (idToBufferFileMap.has(data.id)) {
		return idToBufferFileMap.get(data.id);
	}
	idToBufferFileMap.set(data.id, this);

	optionalAttrs.forEach(function (key) {
		if (data[key]) {
			this.data[key] = data[key];
		}
	}.bind(this));

	//  Try fetching from DB
	this.valuePromise = db.get(data.id)
	.catch(function (e) {
		if (e.status === 404) {
			var doc = this.toDoc();
			doc._id = this.data.id;
			doc.value = '';
			return db.put(doc).then(function () {
				return doc;	
			});
		}
		throw e;
	}.bind(this))
	.then(function (doc) {
		this.value = doc.value;
		return doc.value;
	}.bind(this));
}

BufferFile.prototype.update = function update(value) {
	// save doc to disk
	return this.valuePromise = this.valuePromise
	.then(function () {
		return updateDBDoc(this.data.id, {
			value: value
		});
	}.bind(this))
	.then(function () {
		return value;
	});
};

BufferFile.prototype.toDoc = function toDoc() {
	var out = {
		isBufferFileDoc: true
	};
	keys$1.forEach(function (key) {
		out[key] = this.data[key];
	}.bind(this));
	return out;
};

/* global Map, Set, Promise */
/* eslint no-var: 0, no-console: 0 */
/* eslint-env es6 */

function renderFileList(el, array, options) {

	options = options || {};
	var useOptions = {
		hideDotFiles: (options.hideDotFiles !== undefined ? options.hideDotFiles : true),
		nested: (options.nested !== undefined ? options.nested : true),
		nestingLimit: (options.nestingLimit || 5) - 1,
		sort: options.sort === false ? false : true
	};
	if (options.nestingLimit === 0) return;

	var sortedData = !useOptions.sort ? array : Array.from(array)
		.filter(function (stats) {

			// Whether to hide dotfiles
			if (stats.data.name !== '..' && useOptions.hideDotFiles !== false) {
				return stats.data.name[0] !== '.';
			}
			return true;
		})
		.sort(function (a, b) {
			if (a.name === '..') {
				return -1;
			}
			if (b.name === '..') {
				return 1;
			}
			if (
				(a.isDirectory() === b.isDirectory()) &&
				(a.isFile() === b.isFile())
			) {
				return ([a.data.name, b.data.name].sort(function (a, b) {
					return a.toLowerCase().localeCompare(b.toLowerCase());
				})[0] === a.data.name ? -1 : 1);
			} else {
				if (a.isDirectory()) return -1;
				return 1;
			}
		});

	sortedData.map(function (stats) {

		var li = document.createElement('li');
		li.classList.add('has-icon');
		li.tabIndex = 0;
		li.tabKey = stats;

		if (stats.constructor === Stats) {
			li.dataset.mime = stats.data.mime;
			li.dataset.name = stats.data.name;
			li.dataset.size = stats.data.size;
			li.textContent = stats.data.name;
			li.stats = stats;

			if (stats.isDirectory() && useOptions.nested !== false) {
				var newFileList = document.createElement('ul');
				newFileList.classList.add('filelist');
				li.appendChild(newFileList);
				if (stats.expanded && stats.children) {
					stats.renderFileList(newFileList, useOptions);
				}
			}
		} else if (stats.constructor === BufferFile) {
			li.dataset.name = stats.data.name;
			li.textContent = stats.data.name;
			if (stats.data.icon) {
				li.classList.add('has-icon');
				li.dataset.icon = stats.icon;
			}
			if (stats.data.mime) {
				li.dataset.mime = stats.mime;
			}
		}

		el.appendChild(li);
	});


}

/* global Map, Set, Promise, isServer */
/* eslint no-var: 0, no-console: 0 */
/* eslint-env es6 */

var promises = new Map();
function remoteCmd(cmd, data) {
	var id = performance.now() + '_' + Math.random();
	return wsPromise.then(function (ws) {
		ws.send(JSON.stringify([
			cmd,
			id,
			data
		]));
		
		if (process.env.DEBUG) {
			var err = new Error();
			var stack = err.stack;
		}

		return new Promise(function (resolve$$1) {
			promises.set(id, resolve$$1);
		}).then(function (data) {
			if (data.error) {
				if (process.env.DEBUG) {
					console.error(data.error, stack);
				}
				throw Error(data.error);
			}
			return data.result;
		});
	});
}

function updateEnv(name) {
	return remoteCmd('GET_ENV', name)
	.then(function (result) {
		if (result) process.env[name] = result;
		return result;
	});
}

var wsPromise = getNewWS();

// Connection opened
function getNewWS() {
	return new Promise(function (resolve$$1) {

		if (isServer) resolve$$1();

		var interval = -1;

		var isLocal = location.hostname === 'localhost' || location.hostname === '127.0.0.1';
		var ws = new WebSocket((isLocal ? 'ws://' : 'wss://') + location.host);
		ws.binaryType = 'arraybuffer';

		var isAlive = true;

		ws.addEventListener('message', function m(e) {
			if (typeof e.data === 'string') {
				if (e.data === '__pong__') {
					isAlive = true;
					return;
				}
				var result = JSON.parse(e.data);
				var cmd = result[0];
				var promiseResolver = promises.get(result[1]);
				var data = result[2];
				if (promiseResolver) {
					promises.delete(result[1]);
					return promiseResolver(data);
				}
				if (cmd === 'HANDSHAKE') {
					resolve$$1(
						Promise.all([
							updateEnv('HOME'),
							updateEnv('DEBUG'),
						])
						.then(Promise.resolve(ws))
					);
				}
				if (cmd === 'FS_CHANGE') {
					console.log('CHANGE', data);
				}
				if (cmd === 'FS_ADD') {
					Stats.fromPath(path.dirname(data.path)).then(function (stats) {
						stats.updateChildren();
					});
					console.log('ADD', data);
				}
				if (cmd === 'FS_UNLINK') {
					Stats.fromPath(path.dirname(data.path)).then(function (stats) {
						stats.updateChildren();
					});
					console.log('UNLINK', data);
				}
			}
		});

		ws.addEventListener('open', function firstOpen() {

			interval = setInterval(function ping() {
				if (isAlive === false) {
					terminate();
				}
				isAlive = false;
				ws.send('__ping__');
			}, 3000);

			ws.removeEventListener('open', firstOpen);
			resolve$$1(ws);
		});

		function terminate() {
			clearInterval(interval);
			wsPromise = new Promise(function (resolve$$1) {
				setTimeout(function () {
					console.log('Trying to get new connection');
					getNewWS().then(function (newWs) {
						resolve$$1(newWs);
					});
				}, 1000);
			});
		}
	});
}

/* global Map, Set, Promise, fs, isServer */
/* eslint no-var: 0, no-console: 0 */
/* eslint-env es6 */

// Map to prevent duplicate data objects for each file
var pathToDataMap = new Map();

var fsFromFn = ['isFile', 'isDirectory', 'isBlockDevice', 'isCharacterDevice', 'isSymbolicLink', 'isFIFO', 'isSocket'];
var fsStatic = [
	'dev',
	'mode',
	'nlink',
	'uid',
	'gid',
	'rdev',
	'blksize',
	'ino',
	'size',
	'blocks',
	'atime',
	'mtime',
	'ctime',
	'birthtime',
	'path'
];
var keys = fsStatic.concat(fsFromFn);


/**
 * Special type of singleton which returns the same object for each path.
 */
function Stats (data) {
	if (pathToDataMap.has(data.path)) {
		var existing = pathToDataMap.get(data.path);
		existing.update(data);
		return existing;
	}
	this.fileLists = new Set();
	this.data = {};
	this.update(data);
	pathToDataMap.set(data.path, this);
}

Stats.prototype.update = function update(data) {

	var self = this;

	this.data.name = path.basename(data.path);
	this.data.dirName = path.dirname(data.path);
	this.data.extension = path.extname(data.path).toLowerCase();
	this.data.mime = data.isFile ? mime.lookup(data.path) : 'directory';

	keys.forEach(function (key) {
		this.data[key] = data[key];
	}.bind(this));

	if (this.isDirectory() && !this.children) {
		this.children = [];
		this.childrenPopulated = false;
	}

    // Rerender file lists
	if (this.fileLists.size) {
		Array.from(this.fileLists).forEach(function (filelistEl) {
			filelistEl.innerHTML = '';
			self.renderFileList(filelistEl, filelistEl.filelistOptions);
		});
	}
};

Stats.prototype.toDoc = function toDoc() {
	var out = {
		__webStatDoc: true
	};
	keys.forEach(function (key) {
		out[key] = this.data[key];
	}.bind(this));
	return out;
};

Stats.prototype.updateChildren = function () {
	if(!this.isDirectory()) throw Error('Not a directory');

	var self = this;
	return fs.readdir(self.data.path)
	.then(function (arr) {
		return Promise.all(arr.map(function (child) {
			return Stats.fromPath(path.join(self.data.path, child));
		}));
	})
	.then(function (statsArray) {
		self.children.splice(0);
		self.children.push.apply(self.children, statsArray);

		// Let server know	
		if (!isServer) remoteCmd('CLIENT', {
			cmd: 'watchPath',
			arguments: [self.data.path]
		});

		self.update(self.data);

		return self;  
	});
};

Stats.prototype.destroyFileList = function (el) {
	el.stats = undefined;
	this.fileLists.delete(el);
	el.innerHTML = '';
};

Stats.prototype.renderFileList = function (el, options) {

	el.filelistOptions = options;

	el.stats = this;
	this.fileLists.add(el);
	el.dataset.mime = this.data.mime;
	el.dataset.name = this.data.name;
	el.dataset.size = this.data.size;

	renderFileList(el, this.children, options);
};

// add isFile isDirectory etc
fsFromFn.forEach(function (key) {
	Stats.prototype[key] = new Function('return this.data["' + key + '"];');
});

Stats.fromPath = function (path$$1) {
	return fs.stat(path$$1);
};

Stats.fromDoc = function (data) {
	return new Stats(data);
};

Stats.fromNodeStats = function (path$$1, nodeStat) {

	var out = {};

	fsFromFn.forEach(key => out[key] = nodeStat[key]());
	keys.forEach(key => {
		if (typeof nodeStat[key] !== 'function' && typeof nodeStat[key] !== 'object') {
			out[key] = nodeStat[key];
		}
	});

	out.path = path.resolve(path$$1);

	return new Stats(out);
};

module.exports = Stats;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
